#pragma once
#include <string>
#include <deque>
#include <unordered_map>
#include "../../Vars.h"
#include <array>
#include "../../../Utils/Hash/FNV1A.h"

#include "../../../SDK/SDK.h"

class CCritHack
{
	bool IsEnabled();
	bool ShouldCrit();
	bool IsAttacking(const CUserCmd* pCmd, CTFWeaponBase* pWeapon);
	int NextCritTick(const CUserCmd* pCmd, int loops);

	struct stats_t
	{
		float flCritBucket;	// 0xA54
		int iNumAttacks;	// 0xA58
		int iNumCrits;		// 0xA5C
	};

	struct state_t
	{
		bool bCurrentAttackIsCrit;
		bool bLowered; // NETVAR 0xB40
		int iAltFireHint; // 0xB44
		int iReloadStartClipAmount; // 0xB48
		float flCritEndTime; // 0xB4C
		float flLastCritCheckTime; // NETVAR // 0xB50
		int iLastCritCheckFrame; // 0xB54
		int iCurrentSeed; // 0xB58
		float flLastCritCheckTimeNoPred; // 0xB5C
	};

public:
	void Run(CUserCmd* pCmd);
	bool AreRandomCritsEnabled();
	void Render( );
}; inline CCritHack g_Crits;
#include "AntiAimBeta.h"

void CAntiAimBeta::FixMovement( CUserCmd *pCmd, const Vec3 &vOldAngles, float fOldSideMove, float fOldForwardMove ) {
	//better movement fix roll and pitch above 90 and -90 l0l
	static auto cl_forwardspeed = g_ConVars.FindVar( "cl_forwardspeed" );
	static auto cl_sidespeed = g_ConVars.FindVar( "cl_sidespeed" );
	static auto cl_upspeed = g_ConVars.FindVar( "cl_upspeed" );
	if ( !cl_upspeed || !cl_sidespeed || !cl_forwardspeed ) {
		return;
	}

	const float flMaxForwardSpeed = cl_forwardspeed->GetFloat( );
	const float flMaxSideSpeed = cl_sidespeed->GetFloat( );
	const float flMaxUpSpeed = cl_upspeed->GetFloat( );
	Vector vecForward = { }, vecRight = { }, vecUp = { };
	Utils::AngleVectors( vOldAngles, &vecForward, &vecRight, &vecUp );
	vecForward.z = vecRight.z = vecUp.x = vecUp.y = 0.f;
	vecForward.NormalizeInPlace( );
	vecRight.NormalizeInPlace( );
	vecUp.NormalizeInPlace( );
	Vector vecOldForward = { }, vecOldRight = { }, vecOldUp = { };
	Utils::AngleVectors( pCmd->viewangles, &vecOldForward, &vecOldRight, &vecOldUp );
	vecOldForward.z = vecOldRight.z = vecOldUp.x = vecOldUp.y = 0.f;	// these can all have 3 vectors can they not?
	vecOldForward.NormalizeInPlace( );
	vecOldRight.NormalizeInPlace( );
	vecOldUp.NormalizeInPlace( );
	const float flPitchForward = vecForward.x * pCmd->forwardmove;	//	chunky
	const float flYawForward = vecForward.y * pCmd->forwardmove;	//	chunky
	const float flPitchSide = vecRight.x * pCmd->sidemove;			//	chunky
	const float flYawSide = vecRight.y * pCmd->sidemove;			//	chunky
	const float flRollUp = vecUp.z * pCmd->sidemove;				//	chunky
	const float x = vecOldForward.x * flPitchSide + vecOldForward.y * flYawSide + vecOldForward.x * flPitchForward + vecOldForward.y * flYawForward + vecOldForward.z * flRollUp;
	const float y = vecOldRight.x * flPitchSide + vecOldRight.y * flYawSide + vecOldRight.x * flPitchForward + vecOldRight.y * flYawForward + vecOldRight.z * flRollUp;
	const float z = vecOldUp.x * flYawSide + vecOldUp.y * flPitchSide + vecOldUp.x * flYawForward + vecOldUp.y * flPitchForward + vecOldUp.z * flRollUp;
	pCmd->forwardmove = std::clamp( x, -flMaxForwardSpeed, flMaxForwardSpeed );
	pCmd->sidemove = std::clamp( y, -flMaxSideSpeed, flMaxSideSpeed );
	pCmd->upmove = std::clamp( z, -flMaxUpSpeed, flMaxUpSpeed );	//	not a good idea
}

float CAntiAimBeta::EdgeDistance( float edgeRayYaw ) {
	// Main ray tracing area
	CGameTrace trace;
	Ray_t ray;
	Vector forward;
	const float sy = sinf( DEG2RAD( edgeRayYaw ) ); // yaw
	const float cy = cosf( DEG2RAD( edgeRayYaw ) );
	constexpr float sp = 0.f; // pitch: sinf(DEG2RAD(0))
	constexpr float cp = 1.f; // cosf(DEG2RAD(0))
	forward.x = cp * cy;
	forward.y = cp * sy;
	forward.z = -sp;
	forward = forward * 300.0f + LOCAL_PLAYER->GetEyePosition( );
	ray.Init( LOCAL_PLAYER->GetEyePosition( ), forward );
	// trace::g_pFilterNoPlayer to only focus on the enviroment
	CTraceFilterWorldAndPropsOnly Filter = {};
	I::EngineTrace->TraceRay( ray, 0x4200400B, &Filter, &trace );

	const float edgeDistance = ( trace.startpos - trace.endpos ).Length2D( );
	return edgeDistance;
}

bool CAntiAimBeta::FindEdge( float edgeOrigYaw ) {
	// distance two vectors and report their combined distances
	float edgeLeftDist = EdgeDistance( edgeOrigYaw - 21 );
	edgeLeftDist = edgeLeftDist + EdgeDistance( edgeOrigYaw - 27 );
	float edgeRightDist = EdgeDistance( edgeOrigYaw + 21 );
	edgeRightDist = edgeRightDist + EdgeDistance( edgeOrigYaw + 27 );

	// If the distance is too far, then set the distance to max so the angle
	// isnt used
	if ( edgeLeftDist >= 260 ) { edgeLeftDist = 999999999.f; }
	if ( edgeRightDist >= 260 ) { edgeRightDist = 999999999.f; }

	// If none of the vectors found a wall, then dont edge
	if ( Utils::CompareFloat( edgeLeftDist, edgeRightDist ) ) { return false; }

	// Depending on the edge, choose a direction to face
	if ( edgeRightDist < edgeLeftDist ) {
		edgeToEdgeOn = 1;
		if ( Vars::AntiHack::AntiAim::Pitch.var == 2 ||
			 Vars::AntiHack::AntiAim::Pitch.var == 4 )
			 //|| g_GlobalInfo.m_vRealViewAngles.x < 10.f ) // Check for real up
		{
			edgeToEdgeOn = 2;
		}
		return true;
	}

	edgeToEdgeOn = 2;
	if ( Vars::AntiHack::AntiAim::Pitch.var == 2 ||
		 Vars::AntiHack::AntiAim::Pitch.var == 4 )
		 //|| g_GlobalInfo.m_vRealViewAngles.x < 10.f ) // Check for real up
	{
		edgeToEdgeOn = 1;
	}

	return true;
}

std::pair<float, float> CAntiAimBeta::GetRagePitch( )
{
	const auto &pLocal = g_EntityCache.GetLocal( );
	std::pair<float, float> retnAngles = { 0.f, 0.f };
	switch ( Vars::AntiHack::AntiAimBeta::Pitch.var )
	{
		case 1: //automatic
		{
			switch ( pLocal->m_iClass( ) )
			{
				case SCOUT:
				case SOLDIER:
				case PYRO:
				case DEMOMAN:
				case ENGINEER:
				case MEDIC:
				{
					retnAngles.first = 91.0f;
					retnAngles.second = 91.0f;
					break;
				}
				case HEAVY:
				case SNIPER:
				case SPY:
				{
					retnAngles.first = -91.0f;
					retnAngles.second = -91.0f;
					break;
				}
				default: break;
			}
			break;
		}

		case 2: //manual
		{
			switch ( Vars::AntiHack::AntiAimBeta::RealPitch.var )
			{
				case 0: //up
				{
					if ( Vars::AntiHack::AntiAimBeta::FakePitch.var )
					{
						retnAngles.first = 271.0f;
					}
					else
					{
						retnAngles.first = -91.0f;
					}
					retnAngles.second = -91.0f;
					break;
				}

				case 1: //down
				{
					if ( Vars::AntiHack::AntiAimBeta::FakePitch.var )
					{
						retnAngles.first = -271.0f;
					}
					else
					{
						retnAngles.first = 91.0f;
					}
					retnAngles.second = 91.0f;
					break;
				}

				case 2: //jitter
				{
					if ( bPitchJitter )
					{
						retnAngles.first = -91.0f;
						retnAngles.second = -91.0f;
					}
					else
					{
						retnAngles.first = 271.0f;
						retnAngles.second = -91.0f;
					}
					/*if ( g_GlobalInfo.currentUserCmd->command_number % 5 == 0 )
					{
						retnAngles.first = 0.0f;
						retnAngles.second = 0.0f;
					}
					else if ( g_GlobalInfo.currentUserCmd->command_number % 4 == 0 )
					{
						retnAngles.first = -45.0f;
						retnAngles.second = -45.0f;
					}
					else if ( g_GlobalInfo.currentUserCmd->command_number % 3 == 0 )
					{
						retnAngles.first = 89.0f;
						retnAngles.second = 89.0f;
					}
					else if ( g_GlobalInfo.currentUserCmd->command_number % 2 == 0 )
					{
						retnAngles.first = -89.0f;
						retnAngles.second = -89.0f;
					}*/
					break;
				}
				default: break;
			}
			break;
		}
		default: break;
	}
	return retnAngles;
}

float CAntiAimBeta::GetRealRageYaw( )
{
	float &lastAngleRef = bPacketFlip ? lastRealAngle : lastFakeAngle;
	static float angle = 0.f;
	float retnAngle = 0.f;
	switch ( Vars::AntiHack::AntiAimBeta::RealMode.var )
	{
		case 0: //static
		{
			retnAngle = Vars::AntiHack::AntiAimBeta::RealYaw.var;
			if ( retnAngle < 1 && retnAngle > -1 )
				retnAngle = 0.1f;
			if ( bRealFlip )
			{
				if ( retnAngle > 0.f ) { retnAngle -= 180.f; }
				else if ( retnAngle < 0.f ) { retnAngle += 180.f; }
			}
			break;
		}
		case 1: //edge
		{
			if ( edgeToEdgeOn == 1 ) { retnAngle = 90.f; }
			else if ( edgeToEdgeOn == 2 ) { retnAngle = -90.0f; }
			break;
		}
		case 2: //jitter
		{
			if ( bRealJitter )
			{
				if ( bRealFlip )
				{
					retnAngle += Vars::AntiHack::AntiAimBeta::RealDelta.var;
				}
				else
				{
					retnAngle -= Vars::AntiHack::AntiAimBeta::RealDelta.var;
				}
			}
			else
			{
				if ( bRealFlip )
				{
					retnAngle -= Vars::AntiHack::AntiAimBeta::RealDelta.var;
				}
				else
				{
					retnAngle += Vars::AntiHack::AntiAimBeta::RealDelta.var;
				}
			}
			retnAngle += Vars::AntiHack::AntiAimBeta::RealYaw.var;
			if ( bRealFlip )
			{
				if ( retnAngle > 0.f ) { retnAngle -= 180.f; }
				else if ( retnAngle < 0.f ) { retnAngle += 180.f; }
			}
			if ( retnAngle > 180.f ) { retnAngle -= 360.f; }
			if ( retnAngle < -180.f ) { retnAngle += 360.f; }
			break;
		}
		case 3: //spin
		{
			lastAngleRef += ( bPacketFlip ? +1 : -1 ) * Vars::AntiHack::AntiAimBeta::RealSpin.var;
			if ( lastAngleRef > 180.f ) { lastAngleRef -= 360.f; }
			if ( lastAngleRef < -180.f ) { lastAngleRef += 360.f; }
			retnAngle = lastAngleRef;
			break;
		}
		case 4: //rotate
		{
			static bool flip = false;
			if ( lastAngleRef <= Vars::AntiHack::AntiAimBeta::RealAngle1.var )
				flip = true;
			else if ( lastAngleRef >= Vars::AntiHack::AntiAimBeta::RealAngle2.var )
				flip = false;

			if ( flip )
			{
				lastAngleRef += 1.f * Vars::AntiHack::AntiAimBeta::RealRotate.var;
			}
			else
			{
				lastAngleRef -= 1.f * Vars::AntiHack::AntiAimBeta::RealRotate.var;
			}

			if ( lastAngleRef > 180.f ) { lastAngleRef -= 360.f; }
			if ( lastAngleRef < -180.f ) { lastAngleRef += 360.f; }
			retnAngle = lastAngleRef;
			retnAngle += Vars::AntiHack::AntiAimBeta::RealYaw.var;
			break;
		}
		default: break;
	}
	if ( retnAngle < 1 && retnAngle > -1 )
		retnAngle = 0.1f;

	return retnAngle;
}

float CAntiAimBeta::GetFakeRageYaw( )
{
	float &lastAngleRef = bPacketFlip ? lastRealAngle : lastFakeAngle;
	float retnAngle = 0.f;
	switch ( Vars::AntiHack::AntiAimBeta::FakeMode.var )
	{
		case 0: //static
		{
			retnAngle = Vars::AntiHack::AntiAimBeta::FakeYaw.var;
			if ( retnAngle < 1 && retnAngle > -1 )
				retnAngle = 0.1f;
			if ( bFakeFlip )
			{
				if ( retnAngle > 0.f ) { retnAngle -= 180.f; }
				else if ( retnAngle < 0.f ) { retnAngle += 180.f; }
			}
			break;
		}
		case 1: //edge
		{
			if ( edgeToEdgeOn == 1 ) { retnAngle = -90.f; }
			else if ( edgeToEdgeOn == 2 ) { retnAngle = 90.0f; }
			break;
		}
		case 2: //jitter
		{
			if ( bFakeJitter )
			{
				if ( bFakeFlip )
				{
					retnAngle += Vars::AntiHack::AntiAimBeta::FakeDelta.var;
				}
				else
				{
					retnAngle -= Vars::AntiHack::AntiAimBeta::FakeDelta.var;
				}
			}
			else
			{
				if ( bFakeFlip )
				{
					retnAngle -= Vars::AntiHack::AntiAimBeta::FakeDelta.var;
				}
				else
				{
					retnAngle += Vars::AntiHack::AntiAimBeta::FakeDelta.var;
				}
			}
			retnAngle += Vars::AntiHack::AntiAimBeta::FakeYaw.var;
			if ( bFakeFlip )
			{
				if ( retnAngle > 0.f ) { retnAngle -= 180.f; }
				else if ( retnAngle < 0.f ) { retnAngle += 180.f; }
			}
			if ( retnAngle > 180.f ) { retnAngle -= 360.f; }
			if ( retnAngle < -180.f ) { retnAngle += 360.f; }
			break;
		}
		case 3: //spin
		{
			lastAngleRef += ( bPacketFlip ? +1 : -1 ) * Vars::AntiHack::AntiAimBeta::FakeSpin.var;
			if ( lastAngleRef > 180.f ) { lastAngleRef -= 360.f; }
			if ( lastAngleRef < -180.f ) { lastAngleRef += 360.f; }
			retnAngle = lastAngleRef;
			break;
		}
		/*case 4: //rotate
		{
			static bool flip = false;
			if ( lastAngleRef <= Vars::AntiHack::AntiAimBeta::FakeAngle1.var )
				flip = true;
			else if ( lastAngleRef >= Vars::AntiHack::AntiAimBeta::FakeAngle2.var )
				flip = false;

			if ( flip )
			{
				lastAngleRef += 1.f * Vars::AntiHack::AntiAimBeta::FakeRotate.var;
			}
			else
			{
				lastAngleRef -= 1.f * Vars::AntiHack::AntiAimBeta::FakeRotate.var;
			}
			if ( lastAngleRef > 180.f ) { lastAngleRef -= 360.f; }
			if ( lastAngleRef < -180.f ) { lastAngleRef += 360.f; }
			retnAngle = lastAngleRef;
			retnAngle += Vars::AntiHack::AntiAimBeta::FakeYaw.var;
			if ( bFakeFlip )
			{
				if ( retnAngle > 0.f ) { retnAngle -= 180.f; }
				else if ( retnAngle < 0.f ) { retnAngle += 180.f; }
			}
			break;
		}*/
		default: break;
	}
	if ( retnAngle < 1 && retnAngle > -1 )
		retnAngle = 0.1f;

	return retnAngle;
}

float CAntiAimBeta::GetLegitYaw( )
{
	float retnAngle = 0.f;
	switch ( Vars::AntiHack::AntiAimBeta::LegitYawMode.var )
	{
		case 0: //static
		{
			retnAngle = Vars::AntiHack::AntiAimBeta::LegitYaw.var;
			if ( retnAngle < 1 && retnAngle > -1 )
				retnAngle = 0.1f;
			if ( bRealFlip )
			{
				if ( retnAngle > 0.f ) { retnAngle -= 180.f; }
				else if ( retnAngle < 0.f ) { retnAngle += 180.f; }
			}
			break;
		}

		case 1: //edge
		{
			if ( edgeToEdgeOn == 1 ) { retnAngle = bPacketFlip ? 90.f : -90.f; }
			else if ( edgeToEdgeOn == 2 ) { retnAngle = bPacketFlip ? -90.0f : 90.f; }
			break;
		}
		default: break;
	}
	return retnAngle;
}

void CAntiAimBeta::DoReal( CUserCmd *pCmd, bool *pSendPacket )
{
	g_GlobalInfo.m_bAAActive = false;
	//g_GlobalInfo.m_vRealViewAngles = g_GlobalInfo.m_vViewAngles;
	//g_GlobalInfo.m_vFakeViewAngles = g_GlobalInfo.m_vViewAngles;
	g_GlobalInfo.AntiAim = { false, false };

	// AA toggle key
	if ( GetAsyncKeyState( Vars::AntiHack::AntiAimBeta::ToggleKey.var ) & 0x8000 )
	{
		Vars::AntiHack::AntiAimBeta::Active.var = !Vars::AntiHack::AntiAimBeta::Active.var;
	}

	if ( !Vars::AntiHack::AntiAimBeta::Active.var || g_GlobalInfo.m_bForceSendPacket || g_GlobalInfo.m_bAvoidingBackstab || g_GlobalInfo.m_bShouldShift ) { return; }

	if ( const auto &pLocal = g_EntityCache.GetLocal( ) ) {
		if ( pLocal->deadflag( )
			 || pLocal->InCond( TF_COND_TAUNTING )
			 || pLocal->InCond( TF_COND_HALLOWEEN_GHOST_MODE )
			 || pLocal->InCond( TF_COND_HALLOWEEN_KART ) ) {
			return;
		}

		if ( pLocal->GetMoveType( ) == MOVETYPE_NOCLIP
			 || pLocal->GetMoveType( ) == MOVETYPE_LADDER
			 || pLocal->GetMoveType( ) == MOVETYPE_OBSERVER )
		{
			return;
		}

		if ( pLocal->InCond( TF_COND_SHIELD_CHARGE ) ) {
			return;
		}

		if ( ( pCmd->buttons & IN_ATTACK ) && g_GlobalInfo.m_bWeaponCanAttack ) { return; }
		const Vec3 vOldAngles = pCmd->viewangles;
		const float fOldSideMove = pCmd->sidemove;
		const float fOldForwardMove = pCmd->forwardmove;
		bool bYawSet = false;
		bool bPitchSet = Vars::AntiHack::AntiAimBeta::Pitch.var;
		if ( Vars::AntiHack::AntiAimBeta::Rage.var )
		{
			bPitchJitter = !bPitchJitter;
			if ( Vars::AntiHack::AntiAimBeta::Pitch.var ) {
				const std::pair<float, float> angPair = GetRagePitch( );
				pCmd->viewangles.x = angPair.first;
				//g_GlobalInfo.m_vRealViewAngles.x = angPair.second;
			}

			if ( Vars::AntiHack::AntiAimBeta::RealMode.var == 1 || Vars::AntiHack::AntiAimBeta::FakeMode.var == 1 )
			{
				FindEdge( pCmd->viewangles.y );
			}

			bYawSet = GetRealRageYaw( );

			bRealJitter = !bRealJitter;
			float angOffset = GetRealRageYaw( );
			pCmd->viewangles.y += angOffset;
			//g_GlobalInfo.m_vRealViewAngles.y = pCmd->viewangles.y;
			g_GlobalInfo.AntiAim.first = true;
			//if ( bYawSet ) { *pSendPacket = bPacketFlip = !bPacketFlip; }
		}
		else
		{
			static CInputHelper cyclekey;
			cyclekey.Update( );

			if ( cyclekey.IsPressed( Vars::AntiHack::AntiAimBeta::CycleKey.var ) )
			{
				bRealFlip = !bRealFlip;
			}

			if ( Vars::AntiHack::AntiAimBeta::LegitYawMode.var == 1 )
			{
				FindEdge( pCmd->viewangles.y );
			}

			bYawSet = GetLegitYaw( );

			float angOffset = GetLegitYaw( );
			pCmd->viewangles.y += angOffset;
			//g_GlobalInfo.m_vRealViewAngles.y = pCmd->viewangles.y;
			g_GlobalInfo.AntiAim.first = true;
		}
		g_GlobalInfo.m_bAAActive = bYawSet || bPitchSet;

		FixMovement( pCmd, vOldAngles, fOldSideMove, fOldForwardMove );
	}
}

void CAntiAimBeta::DoFake( CUserCmd *pCmd, bool *pSendPacket )
{
	g_GlobalInfo.m_bAAActive = false;
	g_GlobalInfo.m_vRealViewAngles = g_GlobalInfo.m_vViewAngles;
	g_GlobalInfo.m_vFakeViewAngles = g_GlobalInfo.m_vViewAngles;
	g_GlobalInfo.AntiAim = { false, false };

	// AA toggle key
	if ( GetAsyncKeyState( Vars::AntiHack::AntiAimBeta::ToggleKey.var ) & 0x8000 )
	{
		Vars::AntiHack::AntiAimBeta::Active.var = !Vars::AntiHack::AntiAimBeta::Active.var;
	}

	if ( !Vars::AntiHack::AntiAimBeta::Active.var || g_GlobalInfo.m_bScoutJumping || g_GlobalInfo.m_bForceSendPacket || g_GlobalInfo.m_bAvoidingBackstab || g_GlobalInfo.m_bShouldShift ) { return; }

	if ( const auto &pLocal = g_EntityCache.GetLocal( ) ) {
		if ( pLocal->deadflag( )
			 || pLocal->InCond( TF_COND_TAUNTING )
			 || pLocal->InCond( TF_COND_HALLOWEEN_GHOST_MODE )
			 || pLocal->InCond( TF_COND_HALLOWEEN_KART ) ) {
			return;
		}

		if ( pLocal->GetMoveType( ) == MOVETYPE_NOCLIP
			 || pLocal->GetMoveType( ) == MOVETYPE_LADDER
			 || pLocal->GetMoveType( ) == MOVETYPE_OBSERVER )
		{
			return;
		}

		if ( pLocal->InCond( TF_COND_SHIELD_CHARGE ) ) {
			return;
		}

		if ( ( pCmd->buttons & IN_ATTACK ) && g_GlobalInfo.m_bWeaponCanAttack ) { return; }
		const Vec3 vOldAngles = pCmd->viewangles;
		const float fOldSideMove = pCmd->sidemove;
		const float fOldForwardMove = pCmd->forwardmove;
		bool bYawSet = false;
		bool bPitchSet = Vars::AntiHack::AntiAimBeta::Pitch.var;
		if ( Vars::AntiHack::AntiAimBeta::Rage.var )
		{
			if ( Vars::AntiHack::AntiAimBeta::Pitch.var ) {
				const std::pair<float, float> angPair = GetRagePitch( );
				pCmd->viewangles.x = angPair.first;
				//g_GlobalInfo.m_vRealViewAngles.x = angPair.second;
			}

			if ( Vars::AntiHack::AntiAimBeta::FakeMode.var == 1 )
			{
				FindEdge( pCmd->viewangles.y );
			}

			bYawSet = GetFakeRageYaw( );

			bFakeJitter = !bFakeJitter;
			float angOffset = GetFakeRageYaw( );
			pCmd->viewangles.y += angOffset;
			//g_GlobalInfo.m_vFakeViewAngles.y = pCmd->viewangles.y;
			g_GlobalInfo.AntiAim.second = true;
		}
		else
		{
			bYawSet = true;
			pCmd->viewangles.y += 0.1f;
			//g_GlobalInfo.m_vFakeViewAngles.y = pCmd->viewangles.y;
			g_GlobalInfo.AntiAim.second = true;
		}
		//if ( bYawSet ) { *pSendPacket = bPacketFlip = !bPacketFlip; }
		g_GlobalInfo.m_bAAActive = bYawSet || bPitchSet;

		FixMovement( pCmd, vOldAngles, fOldSideMove, fOldForwardMove );
	}
}

void CAntiAimBeta::Run( CUserCmd *pCmd, bool *pSendPacket ) {
	g_GlobalInfo.m_bAAActive = false;
	g_GlobalInfo.m_vRealViewAngles = g_GlobalInfo.m_vViewAngles;
	g_GlobalInfo.m_vFakeViewAngles = g_GlobalInfo.m_vViewAngles;
	g_GlobalInfo.AntiAim = { false, false };

	// AA toggle key
	if ( GetAsyncKeyState( Vars::AntiHack::AntiAimBeta::ToggleKey.var ) & 0x8000 )
	{
		Vars::AntiHack::AntiAimBeta::Active.var = !Vars::AntiHack::AntiAimBeta::Active.var;
	}

	if ( !Vars::AntiHack::AntiAimBeta::Active.var || g_GlobalInfo.m_bForceSendPacket || g_GlobalInfo.m_bAvoidingBackstab ) { return; }

	if ( const auto &pLocal = g_EntityCache.GetLocal( ) ) {
		if ( pLocal->deadflag( )
			 || pLocal->InCond( TF_COND_TAUNTING )
			 || pLocal->InCond( TF_COND_HALLOWEEN_GHOST_MODE )
			 || pLocal->InCond( TF_COND_HALLOWEEN_KART ) ) {
			return;
		}

		if ( pLocal->GetMoveType( ) == MOVETYPE_NOCLIP
			 || pLocal->GetMoveType( ) == MOVETYPE_LADDER
			 || pLocal->GetMoveType( ) == MOVETYPE_OBSERVER )
		{
			return;
		}

		if ( pLocal->InCond( TF_COND_SHIELD_CHARGE ) ) {
			return;
		}

		if ( ( pCmd->buttons & IN_ATTACK ) && g_GlobalInfo.m_bWeaponCanAttack ) { return; }
		const Vec3 vOldAngles = pCmd->viewangles;
		const float fOldSideMove = pCmd->sidemove;
		const float fOldForwardMove = pCmd->forwardmove;
		static float realangle = 0.f;
		static float fakeangle = 0.f;

		//rage
		bool bYawSet = false;
		bool bPitchSet = Vars::AntiHack::AntiAimBeta::Pitch.var;
		if ( Vars::AntiHack::AntiAimBeta::Rage.var )
		{
			static CInputHelper cyclerealkey;
			cyclerealkey.Update( );

			if ( cyclerealkey.IsPressed( Vars::AntiHack::AntiAimBeta::CycleRealKey.var ) )
			{
				bRealFlip = !bRealFlip;
			}

			static CInputHelper cyclefakekey;
			cyclefakekey.Update( );

			if ( cyclefakekey.IsPressed( Vars::AntiHack::AntiAimBeta::CycleFakeKey.var ) )
			{
				bFakeFlip = !bFakeFlip;
			}

			if ( Vars::AntiHack::AntiAimBeta::Pitch.var ) {
				const std::pair<float, float> angPair = GetRagePitch( );
				pCmd->viewangles.x = angPair.first;
				g_GlobalInfo.m_vRealViewAngles.x = angPair.second;
			}

			if ( Vars::AntiHack::AntiAimBeta::RealMode.var == 1 || Vars::AntiHack::AntiAimBeta::FakeMode.var == 1 )
			{
				FindEdge( pCmd->viewangles.y );
			}

			bYawSet = bPacketFlip ? GetRealRageYaw( ) : GetFakeRageYaw( );

			if ( bPacketFlip ) //real
			{
				float angOffset = GetRealRageYaw( );
				pCmd->viewangles.y += angOffset;
				g_GlobalInfo.m_vRealViewAngles = pCmd->viewangles;
				g_GlobalInfo.AntiAim.first = true;
			}
			else //fake
			{
				float angOffset = GetFakeRageYaw( );
				pCmd->viewangles.y += angOffset;
				g_GlobalInfo.m_vFakeViewAngles.y = pCmd->viewangles.y;
				g_GlobalInfo.AntiAim.second = true;
			}
		}
		//legit
		else
		{
			static CInputHelper cyclekey;
			cyclekey.Update( );

			if ( cyclekey.IsPressed( Vars::AntiHack::AntiAimBeta::CycleKey.var ) )
			{
				bRealFlip = !bRealFlip;
			}

			if ( Vars::AntiHack::AntiAimBeta::LegitYawMode.var == 1 )
			{
				FindEdge( pCmd->viewangles.y );
			}

			bYawSet = bPacketFlip ? GetLegitYaw( ) : 0.1f;

			if ( *pSendPacket ) //real
			{
				pCmd->viewangles.y += 0.1f;
				g_GlobalInfo.m_vFakeViewAngles.y = pCmd->viewangles.y;
				g_GlobalInfo.AntiAim.second = true;
			}
			else //fake
			{
				float angOffset = GetLegitYaw( );
				if ( Vars::Misc::CL_Move::Fakelag.var )
				{
					if ( g_GlobalInfo.m_bChoking )
					{
						pCmd->viewangles.y += angOffset;
						realangle = pCmd->viewangles.y;
					}
					else
						pCmd->viewangles.y = realangle;
				}
				else
				{
					pCmd->viewangles.y += angOffset;
				}
				g_GlobalInfo.m_vRealViewAngles = pCmd->viewangles;
				g_GlobalInfo.AntiAim.first = true;
			}
		}

		//if ( bYawSet ) { *pSendPacket = bPacketFlip = !bPacketFlip; }
		g_GlobalInfo.m_bAAActive = bYawSet || bPitchSet;

		FixMovement( pCmd, vOldAngles, fOldSideMove, fOldForwardMove );
	}
}
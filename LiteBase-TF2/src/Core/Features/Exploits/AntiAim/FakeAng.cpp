#include "FakeAng.h"

void CFakeAng::Run( CUserCmd *pCmd ) {
	if ( const auto& pLocal = g_EntityCache.GetLocal( ) ) {
		if ( !pCmd ) {
			return;
		}

		if ( !pLocal->deadflag( ) ) {

			if ( const auto &pAnimState = pLocal->GetAnimState( ) ) {
				Utils::Clamp( g_GlobalInfo.m_vFakeViewAngles.x, -89.f, 89.f );

				float flOldFrameTime = I::GlobalVars->frametime;
				int nOldSequence = pLocal->m_nSequence( );
				float flOldCycle = pLocal->m_flCycle( );
				auto pOldPoseParams = pLocal->GetPoseParam( );
				char pOldAnimState[ sizeof( CMultiPlayerAnimState ) ] = {};

				memcpy( pOldAnimState, pAnimState, sizeof( CMultiPlayerAnimState ) );

				auto Restore = [ & ] ( )
				{
					I::GlobalVars->frametime = flOldFrameTime;
					pLocal->m_nSequence( ) = nOldSequence;
					pLocal->m_flCycle( ) = flOldCycle;
					pLocal->SetPoseParam( pOldPoseParams );
					memcpy( pAnimState, pOldAnimState, sizeof( CMultiPlayerAnimState ) );
				};

				I::GlobalVars->frametime = 0.0f;

				pAnimState->m_flCurrentFeetYaw = g_GlobalInfo.m_vFakeViewAngles.y;
				pAnimState->m_flGoalFeetYaw = g_GlobalInfo.m_vFakeViewAngles.x;
				pAnimState->Update( g_GlobalInfo.m_vFakeViewAngles.y, g_GlobalInfo.m_vFakeViewAngles.x );

				matrix3x4_t bones[ 128 ];
				if ( pLocal->SetupBones( bones, 128, 0x0007FF00, I::GlobalVars->curtime ) ) {
					BoneMatrix = *reinterpret_cast< FakeMatrixes * >( bones );
				}

				Restore( );
			}
		}

	}
}